-- ============================================
-- SecureProgramming course â€” database bootstrap
-- MySQL 8.0 / Homebrew build compatible
-- Password policy: classroom-only (uses 1qaz!QAZ)
-- ============================================

-- (Optional) Set/normalize the local root password for convenience.
-- Remove this if your environment forbids changing root here.
ALTER USER 'root'@'localhost'
  IDENTIFIED WITH caching_sha2_password BY '1qaz!QAZ';

-- Re-create the course database (idempotent).
DROP DATABASE IF EXISTS `secure_programming`;
CREATE DATABASE `secure_programming`
  DEFAULT CHARACTER SET utf8mb4
  COLLATE utf8mb4_0900_ai_ci;

-- --------------------------------------------
-- Principle of least privilege via roles
-- --------------------------------------------
DROP ROLE IF EXISTS `secprog_readwrite`, `secprog_migrate_role`;
CREATE ROLE `secprog_readwrite`, `secprog_migrate_role`;

-- Application role: CRUD + stored routine execution; no DDL.
GRANT SELECT, INSERT, UPDATE, DELETE, EXECUTE
  ON `secure_programming`.* TO `secprog_readwrite`;

-- Migration role: schema changes only; kept separate from app.
GRANT CREATE, ALTER, DROP, INDEX, CREATE VIEW,
      ALTER ROUTINE, CREATE ROUTINE, TRIGGER
  ON `secure_programming`.* TO `secprog_migrate_role`;

-- --------------------------------------------
-- Users (localhost-only) and role assignment
-- --------------------------------------------
DROP USER IF EXISTS 'secprog_app'@'localhost', 'secprog_migrate'@'localhost';

CREATE USER 'secprog_app'@'localhost'
  IDENTIFIED WITH caching_sha2_password BY '1qaz!QAZ';
GRANT `secprog_readwrite` TO 'secprog_app'@'localhost';
SET DEFAULT ROLE `secprog_readwrite` TO 'secprog_app'@'localhost';

CREATE USER 'secprog_migrate'@'localhost'
  IDENTIFIED WITH caching_sha2_password BY '1qaz!QAZ';
GRANT `secprog_migrate_role` TO 'secprog_migrate'@'localhost';
SET DEFAULT ROLE `secprog_migrate_role` TO 'secprog_migrate'@'localhost';

FLUSH PRIVILEGES;
